mod examples_x.b.x;

import examples_x.b.x;


class Start
{

    var x = X.yy.yy.operator+("");
    var i = SQL.q(cursor, x /9 ? 504 : 403, io.READ)/113;

    var y=self->foo(x, foo(x));

    private class X base Start.X.g {
        dynamic_object v=9;

        /*
        * Macros always return void
        */
        static macros _get_addr_info (int x, char c)
        {
            string n = null; // cannot assign null to native string
            label:
            int portid = x;
            sys.io.open((short)c, sys.io.PORT);
        };
    }

    /*
    * assign-expr operators must return void,
    * all other operators must return a value
    */
    fn operator+(String s) : int
    {
        return 0;
    }

    public Start() {

    }

    fn foo()
    {
        int z = x;
        examples.B.a x;
        uInt64 u = new uInt64(foo() == foo()++ ? 1 : 0);
        short squery = SQL.q(cursor, x /9 ? 504 : 403, io.READ)/113;
        short query = x>>9 ? 103 : (x<<2)-9;
        int q = i ^ 8 && ((x << 2) | 1);
        i = 5<3/8%8+8/8*8;
        String z = x << (char)9 << (char)7 + "'";
        String q = 'h' + 'e' + 'l' + 'l' + 'o' + "!";
//        mod examples_x.b.x;
        int[] i = new int[]{1, 2, 3, 4, 5, 7};
        A[] a = new A[]{ new A("1"), new A("2"), new A("3", { 9 } ) };
        int q = (int)z++/7;

        if(x < Main.v) {
            int q = 5 * 4;
            int i = (((int)v--)/6);

            while(io.NextLine() != EOF) {
                _get_addr_info(190_132_999, c);
                bool i = !z++;
                Map mp = null;
                do {
                    label:
                    break;
                    int i = ((short) x[3])++ + 6;
                    int i = ((short) x[3]++) + 6/9;
                    int b = --arr[9];
                }while(Main.v-- > 0);
                goto label;
                continue;
            }
        }
        else if(x == Main.class){
               Main.chain()
                .chain()
                .chain();

        }
        else {
            goto expr;
        }

        try {
            io.print("Hello");
        }catch(Exception e)
        {
            uInt64 u = new uInt64(foo() == foo()++ ? 1 : 0);
            short squery = SQL.query(cursor, x /9 ? 504 : 403, io.READ)/113;
            short query = x>>9 ? 103 : (x<<2)-9;
        }
        catch(nullptr){}
        finally{
            if(file != null)
            {
                file.close();
            }

            throw new Exception();
        }

        String s = new String(x[3], 0);
        String i = new Map(self->v);
        var r = self->v;
        Object o = null;
        var x = 0_000_000.11___0e+10;
        var[] y = 0x3344b8ef3_382848;
        var u = 0x4376;

        __asm (
            "movi 0,%adx    # move address to value of function ptr to address register "
            "movx %adx,#adx # store address of main function back in %adx               "
        );
    }

    private fn foobar(int i, y yy) {

    }

    private fn foobar(int i, f xy) {

    }

    // TODO: check for this
    var y=[7].foo(89).yt.foo(9)[9].foo(8)[90].foo();
    var yy = base->application#Main.foo("foo");

    /*
    * Main function
    */
    private static override fn main(examples.b#Class.v b6, Integer#Int[] x,
            List lst,Int b, Int.c z) : int
    { // close up gap with processing xpression after function call (parse '++' and '--'
        {
//            int i = ""'n''m''h''y';
        }

        var i = C.b >> (__int8)5;
        z %= 99.1345;
        String s += "";
        String s;
        examples.B.a x;
        examples.x#B.a z = 5;
        examples y;
        examples.B.a k = new Example("this is a test");

        examples.B.a w = examples.B.a;
        h = examples.x#B.a;
        examples.B.a = examples;
//        examples.B.a( u = examples.B.a;
        sys.io.open("/usr/share/libutils.so", sys.io#BIN, self->x++, new String("string"), sys.io.read("/usr/share/java-7_8.jar"));

        for (int i = 0; i < 10; i++) {
            i++;
        }

        ArrayList charLict = new ArrayList(char.class);
        foreach (char c : charLict.toArray()) {
            io.out.put(c);
        }

        x = 9;
        return i;
    }

    private static override fn main(examples.b#Class.v b6, Integer#Int x, Int b, Int.c z) : int
    {
        {
//            int i = ""'n''m''h''y';
        }

        int i = C.b.class;
        examples.B.a x;
        examples.x#B.a z = self->v;
        examples ;
        examples.B.a k = 0;

        examples.B.a w = examples.B.a;
        examples.B.a h = examples.x#B.a;
        examples.B.a t = examples;
        examples.B.a u = examples.B.a;
        return i.gh#sys.io;
    }
}
