mod std;

class string {
    /*this will hold our string */
        private var[] data;

        string( var[] immstr ) {
            append(immstr);
        }

        fn replace( var pos, var replaceChar ) : string {
            if(pos >= sizeof(data)) {
                throw new RuntimeErr("Index out of bounds exception");
            }

            data[pos] = replaceChar;
            return self;
        }

        fn append(var[] immstr) : string {
            var[] newStr = new var[sizeof(data) + sizeof(immstr)];

            var iter;
            for(var i = 0; i < sizeof(data); i++) {
                newStr[iter++] = data[i];
            }

            for(var i = 0; i < sizeof(immstr); i++) {
                newStr[iter++] = immstr[i];
            }

            data = Array.copyOf(newStr, sizeof(newStr));
            return self;
        }

        fn at( var pos ) : __int8 {
            if(pos >= sizeof(data)) {
                throw new RuntimeErr("Index out of bounds");
            }

            return data[pos];
        }

        fn operator+( var[] immstr ) : string {
            append(immstr);
            return self;
        }

        fn operator+( string str ) : string {
            append(str.data);
            return self;
        }

        fn operator==( string str ) : var {
            var iter;
            foreach(var char : data) {
                if(char != str.at(iter++)) {
                    return false;
                }
            }

            return true;
        }

        fn operator==( var[] str ) : var {
            var iter;
            foreach( var char : data ) {
                if(char != str[iter++]) {
                    return false;
                }
            }

            return true;
        }

        fn operator=( var[] immstr ) {
            data = Array.copyOf(immstr, sizeof(immstr));
        }

        fn operator+( var char ) : string {
            var[] arry = new var[1];
            arry[0]=char;
            append(arry);
            return self;
        }

        fn value() : var[] {
            return data;
        }
}