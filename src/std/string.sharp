mod std;

class string {
    /*this will hold our string */
        private var[] data;

        string( var[] immstr )
        {
            append(immstr);
        }

        fn replace( var pos, var replaceChar ) : string
        {
            if(pos >= sizeof(data)) {
                throw new RuntimeErr("Index out of bounds exception");
            }

            data[pos] = replaceChar;
            return self;
         }

        fn append(var[] immstr) : string
        {
            var[] newStr = new var[sizeof(data) + sizeof(immstr)];

            var iter=0;
            for(var i = 0; i < sizeof(data); i++) {
                newStr[iter++] = data[i];
            }

            for(var i = 0; i < sizeof(immstr); i++)
            {
                newStr[iter++] = immstr[i];
            }

            data = Array.copyOf(newStr, sizeof(newStr));
            newStr = null;
            return self;
        }

        fn at( var pos ) : __int8
        {
            if(pos >= sizeof(data)) {
                throw new RuntimeErr("Index out of bounds Array: " + string.convertInt(sizeof(data))
                       + " at index pos " + string.convertInt(pos));
            }

            return data[pos];
        }

        fn operator+( var[] immstr ) : string
        {
            string s = new string(data);
            return s.append(immstr);
        }

        fn operator+( string str ) : string
        {
            string s = new string(data);
            return s.append(str.value());
        }

        fn operator==( string str ) : var
        {
            var iter;
            foreach(var char : data) {
                if(char != str.at(iter++)) {
                    return false;
                }
            }

            return true;
        }

        fn operator==( var[] str ) : var
        {
            var iter;
            foreach( var char : data ) {
                if(char != str[iter++]) {
                    return false;
                }
            }

            return true;
        }

        fn operator=( var[] immstr )
        {
            data = Array.copyOf(immstr, sizeof(immstr));
        }

        fn operator+( var char ) : string
        {
            var[] arry = new var[1];
            arry[0]=char;

            string s = new string(data);
            s.append(arry);

            return s;
        }

        fn operator+=( var char ) : string
        {
            var[] arry = new var[1];
            arry[0]=char;

            return append(arry);
        }

        fn operator+=( var[] immstr ) : string
        {
            return append(immstr);
        }

        fn operator+=( string str ) : string
        {
            return append(str.value());
        }

        fn value() : var[]
        {
            return data;
        }

        static fn convertInt( var number ) : string
        {
            if (number == 0) {
                return new string("0");
            }

            string temp = new string("");
            string returnvalue= new string("");
            while (((__int64)number)>0) {
                temp+=(number%10)+48;
                number/=10;
            }

            for (var i=sizeof(temp.value())-1; i >= 0; i--) {
                returnvalue+=temp.at(i);
            }
            return returnvalue;
        }
}