mod application;

class Base {

    static fn print2(var[] message) {
        __asm("odessy/x64/print.asm");
    }
}

class Main base Base {

    var x;
    Main mm;

    static fn print(var[] message) {
        __asm("odessy/x64/print.asm");
    }

    static fn printc(var char) {
        __asm("odessy/x64/printc.asm");
    }

    static fn foo(Main main) {

    }

    static fn fact(var x) : var {
       // return (x == 1 ? x : x * fact(x - 1));
        try {
        __asm(
            "movr %adx,%fp"
            "smov %ebx"
            "movi 1,%ecx"
            "movi $L1,%adx"
            "le ebx,ecx"
            "ifne"
            "movr %adx,%fp"
            "smovr %ebx-0x5"
            "ret"
            ".L1:"
            "movr ecf,ebx"
            "dec %ecf"
            "inc %sp"
            "iframe"
            "pushr %ecf"
            "call <fact>"
            "movr %adx,%sp"
            "smov %ebx"
            "movr %adx,%fp"
            "smov %ecx"
            "mul %ecx,%ebx, %bmr"
            "smovr %bmr-0x5"
            "ret"
        );
        } catch(Throwable e) {
            __asm("ret");
        }
    }

    static fn operator++(var x) {
        x + 1;
    }

    static fn operator+(var x) : var {
        x = new Main();
        return 1;
    }

    static fn operator<<(var x) : var {
        x = new Main();
        return 1;
    }

    static fn operator<<(Main x) : var {
        x = new Main();
        return 1;
    }

    static fn operator+=(var x) : var {
        x = new Main();
        return 1;
    }


    static fn main(string[] args) : var {
var[] str = "factorial of 8 is ";
        dynamic_object o = new Main();
        Main m;
        Main mainVar;
        base->print2(str);
        self->fact(8);
        foo(new Main[9][0]);
        Main main = new Main();
        var x = 9;
        __asm("movi #1,ecx" "new_i ecx");
        //main++;
        //(Main)o;
        __asm("movi ' ',ebx" "_putc ebx");
        printc(++x);
        __asm("movi ' ',ebx" "_putc ebx");
        printc((__int8)x++);
        __asm("movi ' ',ebx" "_putc ebx");
        printc(++x);
        __asm("movi ' ',ebx" "_putc ebx");
        printc(x ? 1 : 2);
        __asm("movi ' ',ebx" "_putc ebx");
        printc(+x);
        __asm("movi ' ',ebx" "_putc ebx");
        printc(-x);
        __asm("movi ' ',ebx" "_putc ebx");
        printc(x);
        __asm("movi '~',ebx" "_putc ebx");
        printc(5*(x+3)*9999);
        __asm("movi '~',ebx" "_putc ebx");
        printc(str[0]);
//        __asm("movi ' ',ebx" "_putc ebx");
//        printc((main << x) + 5);            // this will crash lol
        __asm("movi ' ',ebx" "_putc ebx");
        printc(x <= 5);
        __asm("movi '#',ebx" "_putc ebx");
        printc(x == 5);
        __asm("movi ' ',ebx" "_putc ebx");
        printc(x != 5);
        var[] arry;

        arry = new var[9];
        printc((arry[0] = 112));
        __asm("movi '@',ebx" "_putc ebx");
        printc(x && x|=99 && fact(8));

        __asm("movi ' ',ebx" "_putc ebx");
        __asm(
            "movr %adx,%sp"
            "smov %ebx"
            "put %ebx"
         );
        //fact(6);
        //__asm("odessy/x64/compute_factorial.asm");
    }
}